Çevrimiçi Market Alışveriş Sepeti Uygulaması için Dökümantasyon

Bu dökümantasyon, programın adım adım açıklamasını ve işlevlerini sağlar.

Giriş

Program, Python ve Streamlit kullanılarak oluşturulmuş basit bir çevrimiçi market alışveriş sepeti uygulamasıdır. Kullanıcıların şunları yapmasına olanak tanır:

Mağazaya ürün ekleme.

Mağazadaki tüm ürünleri listeleme.

Seçili ürünleri mağazadan silme.

Uygulamayı kapatma.

Yapı ve Ana Bileşenler

Gerekli Kütüphanelerin İçe Aktarılması

import streamlit as st
import pandas as pd

streamlit: Web arayüzü oluşturmak için kullanılır.

pandas: Tablo verilerini görüntülemek için kullanılır.

Market Sınıfı
Market sınıfı, bir metin dosyasında (product.txt) ürünleri yönetmek için kullanılır. Ürün eklemek, okumak, listelemek ve silmek için yöntemler sağlar.

Market Sınıfındaki Yöntemler

__init__ Yöntemi
Market sınıfını başlatır ve product.txt dosyasının var olup olmadığını kontrol eder. Dosya bulunamazsa yeni bir dosya oluşturur.

def __init__(self, filename='product.txt'):
    self.filename = filename
    try:
        with open(self.filename, 'r'):
            pass
    except FileNotFoundError:
        with open(self.filename, 'w') as file:
            pass

add_product Yöntemi
Dosyaya yeni bir ürün ekler. Her ürün girişi, adı, kategorisi (isteğe bağlı), fiyatı ve stok miktarını (isteğe bağlı) içerir.

def add_product(self, product_name, product_price, product_category=None, product_stock=None):
    with open(self.filename, 'a') as file:
        file.write(f"{product_name},{product_category or ''},{product_price},{product_stock or ''}\n")

read_products Yöntemi
Dosyadaki tüm ürünleri okur ve bunları sözlük listesine dönüştürür.

def read_products(self):
    products = []
    with open(self.filename, 'r') as file:
        lines = file.readlines()
        for line in lines:
            parts = line.strip().split(',')
            if len(parts) >= 3:
                product = {
                    'name': parts[0],
                    'category': parts[1] if len(parts) > 1 else '',
                    'price': float(parts[2]),
                    'stock': int(parts[3]) if len(parts) > 3 else 0
                }
                products.append(product)
    return products

list_products Yöntemi
Tüm ürünleri Streamlit kullanarak tablo formatında gösterir.

def list_products(self):
    products = self.read_products()
    if products:
        df = pd.DataFrame(products)
        df.index = range(1, len(df) + 1)
        df.index.name = 'Sıra No'
        st.table(df)
    else:
        st.warning("Listeleme yapılacak ürün bulunamadı!")

delete_products Yöntemi
Ürün isimlerine göre seçilen ürünleri siler ve dosyayı günceller.

def delete_products(self, identifiers):
    products = self.read_products()
    updated_products = [p for p in products if p['name'] not in identifiers]

    with open(self.filename, 'w') as file:
        for product in updated_products:
            file.write(f"{product['name']},{product['category']},{product['price']},{product['stock']}\n")

Streamlit Uygulaması
Streamlit uygulaması, kullanıcı arayüzünü yönetir ve Market sınıfına bağlanır.

Ana Menü

Bir yan menü, kullanıcıların farklı seçenekleri seçmesine olanak tanır: "Ürün Ekle," "Ürünleri Listele," "Ürün Sil" veya "Çıkış."

menu_option = st.sidebar.radio(
    "*** MENÜ ***",
    ["Ürün Ekle","Ürünleri Listele",  "Ürün Sil", "Çıkış"]
)
market = Market()

Fonksiyonlar

Ürün Ekle
Kullanıcının ürün detaylarını (ad, fiyat, kategori, stok) girmesine olanak tanır ve ürünü mağazaya ekler.

if menu_option == "Ürün Ekle":
    product_name = st.text_input("Ürün Adı:")
    product_price = st.number_input("Fiyat:", min_value=0.0)
    product_category = st.text_input("Kategori (isteğe bağlı):")
    product_stock = st.number_input("Stok Miktarı (isteğe bağlı):", min_value=0)
    if st.button("Ekle"):
        market.add_product(product_name, product_price, product_category, product_stock)
        st.success("Ürün başarıyla eklendi!")

Ürünleri Listele
Tüm ürünleri tablo formatında gösterir. Eğer ürün yoksa bir uyarı görünür.

elif menu_option == "Ürünleri Listele":
    market.list_products()

Ürün Sil
Kullanıcının ürünleri seçmesine ve silmesine olanak tanır. Silmeden önce seçilen ürünler tablo olarak görüntülenir.

elif menu_option == "Ürün Sil":
    products = market.read_products()
    if products:
        product_names = [product['name'] for product in products]
        selected_products = st.multiselect("Silmek istediğiniz ürünleri seçin:", options=product_names)
        if selected_products:
            selected_details = [p for p in products if p['name'] in selected_products]
            df = pd.DataFrame(selected_details)
            st.table(df)
            st.warning("Seçilen Ürünler Ürünler Listesinden Silinecektir! Devam Etmek İçin Sil Butonuna Tıklayınız")
            if st.button("Sil"):
                market.delete_products(selected_products)
                st.success("Seçilen Ürünler başarıyla silindi!")
        else:
            st.info("Silmek için bir veya daha fazla ürün seçin.")
    else:
        st.warning("Silinecek ürün bulunamadı!")

Çıkış
Basit bir çıkış mesajı gösterir.

elif menu_option == "Çıkış":
    st.write("Uygulama sonlandırılıyor...")

Programı Çalıştırma Adımları

Betiği bir Python dosyası olarak kaydedin (örneğin, market_app.py).

Gerekli kütüphaneleri yükleyin:

pip install streamlit pandas

Uygulamayı Streamlit kullanarak çalıştırın:

streamlit run market_app.py

Yan menü yönlendirmesini kullanarak fonksiyonlar arasında gezinin.

Özet

Bu program, bir alışveriş sepeti sisteminin temel bir gösterimi olarak hizmet eder. Veri depolama için metin dosyalarını ve kullanıcı arayüzü için Streamlit kullanır. 